name: C++ CI with Packaging

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PACKAGE_NAME: visitor-pattern
  VERSION: 1.0.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev libgmock-dev debhelper dh-make
        
    - name: Configure and Build
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --config Release
        
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
        
    - name: Create DEB package directory structure
      run: |
        mkdir -p package/DEBIAN
        mkdir -p package/usr/local/bin
        mkdir -p package/usr/local/lib
        mkdir -p package/usr/local/include
        
    - name: Copy files to package directory
      run: |
        cd build
        cp ConceptualExample BookstoreExample OnlineShopExample Program ../package/usr/local/bin/
        cp libvisitor_static.a ../package/usr/local/lib/
        cp -r ../include/* ../package/usr/local/include/
        
    - name: Create control file
      run: |
        echo "Package: ${{ env.PACKAGE_NAME }}" > package/DEBIAN/control
        echo "Version: ${{ env.VERSION }}" >> package/DEBIAN/control
        echo "Section: devel" >> package/DEBIAN/control
        echo "Priority: optional" >> package/DEBIAN/control
        echo "Architecture: amd64" >> package/DEBIAN/control
        echo "Maintainer: Your Name <your.email@example.com>" >> package/DEBIAN/control
        echo "Description: Visitor Pattern Implementation" >> package/DEBIAN/control
        
    - name: Build DEB package
      run: |
        dpkg-deb --build package ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}.deb
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}.deb
        path: ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}.deb
        
  create-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}.deb
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}.deb
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        body: |
          Visitor Pattern Implementation
          - Includes static library
          - Example executables
          - Unit tests
